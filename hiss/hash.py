# Copyright 2013-2014, Simon Kennedy, code@sffjunkie.co.uk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Part of 'hiss' the asynchronous notification library

import hashlib
from os import urandom
from binascii import hexlify, unhexlify

from hiss.exception import HissError

DEFAULT_HASH_ALGORITHM = 'SHA256'

class HashInfo():
    """Records the hash information required to be sent to remote hosts.
    
    Exposes the following properties
    
    * algorithm - The algorithm used to generate the hash (str)
    * key_hash  - The hash of the key. Generated by the hash algorithm (bytes)
    * salt      - The salt added to the key to generate the key_hash (bytes)
    """
    
    def __init__(self, algorithm, key_hash, salt):
        if isinstance(algorithm, (bytes, bytearray)):
            algorithm = algorithm.decode('UTF-8')
        self.algorithm = algorithm.upper()
        
        if isinstance(key_hash, str):
            key_hash = unhexlify(key_hash.encode('UTF-8'))
        self.key_hash = key_hash
        
        if isinstance(salt, str):
            salt = unhexlify(salt.encode('UTF-8'))
        self.salt = salt
        
    def __eq__(self, other):
        return self.algorithm == other.algorithm and \
            self.key_hash == other.key_hash and \
            self.salt == other.salt
        
    def __repr__(self):
        return '%s:%s.%s' % (self.algorithm,
                             hexlify(self.key_hash).decode('UTF-8'),
                             hexlify(self.salt).decode('UTF-8'))

def generate_hash(password, hash_algorithm=DEFAULT_HASH_ALGORITHM):
    """Create a :class:`~hiss.hash.HashInfo` instance for the password using
    the specified hash algorithm.
    
    :param password:       The password to generate the hash for.
    :type password:        str or UTF-8 encoded bytes.
    :param hash_algorithm: The algorithm to use to generate the hash (one of
                           `MD5`, `SHA1`, `SHA256` (default) or `SHA512`)
    :type hash_algorithm:  str
    :raises HissError:     if the hash_algorithm specified is not known
    """
    
    if hash_algorithm not in ['MD5', 'SHA1', 'SHA256', 'SHA512']:
        raise HissError("Don't know how to handle hash algorithm %s" % hash_algorithm)
    
    if isinstance(password, str):
        password = password.encode('UTF-8')
    
    salt = urandom(16)
    key_basis = password + salt
    
    if hash_algorithm == 'MD5':
        key = hashlib.md5(key_basis).digest()
        key_hash = hashlib.md5(key).digest()
    elif hash_algorithm == 'SHA1':
        key = hashlib.sha1(key_basis).digest()
        key_hash = hashlib.sha1(key).digest()
    elif hash_algorithm == 'SHA256':
        key = hashlib.sha256(key_basis).digest()
        key_hash = hashlib.sha256(key).digest()
    elif hash_algorithm == 'SHA512':
        key = hashlib.sha512(key_basis).digest()
        key_hash = hashlib.sha512(key).digest()
    
    return HashInfo(DEFAULT_HASH_ALGORITHM, key_hash, salt)

def validate_hash(password, hash_to_validate):
    """Validate the information stored in the :class:`~hiss.hash.HashInfo`
    instance against the password.
    
    :param password:         The password used to validate the hash.
    :type password:          str or UTF-8 encoded bytes.
    :param hash_to_validate: The hash to validate
    :type hash_to_validate:  :class:`~hiss.hash.HashInfo`
    :raises HissError:       if the hash validation fails.
    """
    
    if hash_to_validate.algorithm not in ['MD5', 'SHA1', 'SHA256', 'SHA512']:
        raise ValueError("Don't know how to validate hash algorithm %s" % hash_to_validate.algorithm)
    
    if isinstance(password, str):
        password = password.encode('UTF-8')
    
    key_basis = password + hash_to_validate.salt
    
    if hash_to_validate.algorithm == 'MD5':
        key = hashlib.md5(key_basis).digest()
        key_hash = hashlib.md5(key).digest()
    elif hash_to_validate.algorithm == 'SHA1':
        key = hashlib.sha1(key_basis).digest()
        key_hash = hashlib.sha1(key).digest()
    elif hash_to_validate.algorithm == 'SHA256':
        key = hashlib.sha256(key_basis).digest()
        key_hash = hashlib.sha256(key).digest()
    elif hash_to_validate.algorithm == 'SHA512':
        key = hashlib.sha512(key_basis).digest()
        key_hash = hashlib.sha512(key).digest()
    
    if hash_to_validate.key_hash != key_hash:
        raise HissError('Invalid hash in request') 
